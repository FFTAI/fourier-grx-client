{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#fourier-grx-client","title":"fourier-grx-client","text":"<p>This is the client library for the Fourier GRX robot. The correponding server library can be found here.</p>"},{"location":"#breaking-changes","title":"\u2757 Breaking Changes","text":"<p>For users who have been using Wiki-GRx-Deploy and those who are new to this library, Please note the following breaking changes:</p> <ul> <li>Wiki-GRx-Deploy has been deprecated and is no longer supported.</li> <li>All user-facing interfaces now default to use radians instead of degrees.</li> <li>URDF now loads from Wiki-GRx-Models via fourier-robot-descriptions package.</li> <li>Nameing convention for all links and joints are now consistent with the URDF.</li> <li>Config file structure has been updated to match the latest version of the server. Default config file can be found under config directory.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Attention</p> <p>This software is highly unstable and subject to change at any time. Version 0.2.0a3 is only compatible with <code>fourier-grx</code> version <code>v1.0.0a10</code> and up.</p>"},{"location":"#on-the-robot","title":"On the robot","text":"<p>On the robot, install <code>fourier-grx==1.0.0a10</code> following the instructions here.</p>"},{"location":"#on-the-robot-computer","title":"On the robot computer:","text":"<p>On the robot, install <code>fourier-grx==1.0.0a10</code> following the Installation Instructions.</p>"},{"location":"#on-other-machines","title":"On other machines:","text":"<p>Grx client will be automatically installed when installing <code>fourier-grx</code> on the robot.</p> <p>If you want to control the robot from another machine, you can install the client library using the following methods:</p>"},{"location":"#install-from-pypi","title":"Install from pypi","text":"<p>Run:</p> <pre><code>pip install fourier-grx-client==0.2.0a3\n</code></pre>"},{"location":"#install-from-source","title":"Install from source","text":"<pre><code>git clone https://github.com/FFTAI/fourier-grx-client.git\ncd fourier-grx-client\npip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Please read the Tutorial for a step-by-step guide on how to get started and use the interfaces.</p> <p>Demo scripts can be found in the examples directory.</p> <p>For more information on the API, see the API Reference.</p>"},{"location":"#development","title":"Development","text":"<ol> <li>Install the <code>pdm</code> package manager:</li> </ol> <pre><code>pip install pdm\n</code></pre> <ol> <li>use <code>pdm</code> to install the package and all development dependencies:</li> </ol> <pre><code>pdm install -v -d\n</code></pre> <ol> <li>Install pre-commit hooks:</li> </ol> <pre><code>pre-commit install\n</code></pre>"},{"location":"Installation/","title":"Fourier-GRX","text":"<p>Welcome to the Fourier-GRX SDK, your gateway to controlling Fourier's humanoid robots! This guide will help you set up your environment. Let\u2019s dive into the future of robotics! \ud83e\udd16\ud83d\ude80</p>"},{"location":"Installation/#system-requirement","title":"\ud83d\udcbb System Requirement","text":"<pre><code>\u2022 Operating System: Ubuntu 20.04 and up\n\u2022 Python Version: Python 3.11\n</code></pre> <p>If you are first time using the robot, please set up the permission for IMU(HIPNUC IMU) and joysticks with permission_description.</p>"},{"location":"Installation/#system-cpu-setup","title":"System CPU Setup","text":"<p>In order to have good performance of the Neural Network inference speed, it is recommended to disable the effeciency cores of the CPU. The following steps are for Intel CPUs:</p> <ol> <li>Enter the BIOS setup by pressing the F2 key during boot.</li> <li>Navigate to the Advanced tab.</li> <li>Select Processor Configuration.</li> <li>Disable the efficiency cores by setting the number of active cores to 0.</li> <li>Press F10 to save and exit.</li> <li>Reboot the system.</li> </ol>"},{"location":"Installation/#environment-setup","title":"\ud83d\ude80 Environment Setup","text":""},{"location":"Installation/#step-1-install-conda","title":"Step 1: Install Conda","text":"<ol> <li>Download and install Miniconda:    Follow the instructions on the Miniconda installation guide.</li> </ol>"},{"location":"Installation/#step-2-create-and-activate-conda-environment","title":"Step 2: Create and Activate Conda Environment","text":"<ol> <li>Create and activate the environment:</li> </ol> <p>[!NOTE] For now we only support Python 3.11.</p> <pre><code>```bash\nconda create -n grx-env python=3.11\nconda activate grx-env\n```\n</code></pre> <p>For more details, see the Conda user guide.</p>"},{"location":"Installation/#step-3-set-up-firewall","title":"Step 3: Set Up Firewall","text":"<p>If you are using <code>ufw</code>, follow these steps to enable firewall access for the <code>grx</code> server to be able to automatically detect clients:</p> <ol> <li> <p>Enable firewall access: <pre><code>sudo ufw allow 7446/udp\n</code></pre></p> </li> <li> <p>Check the firewall status: <pre><code>sudo ufw status\n</code></pre></p> </li> </ol>"},{"location":"Installation/#step-4-install-fourier-grx-library","title":"Step 4: Install <code>fourier-grx</code> Library","text":"<ol> <li> <p>Install the library: <pre><code>python -m pip install fourier-grx==1.0.0a10\n</code></pre></p> </li> <li> <p>Verify installation: <pre><code>grx --help\n</code></pre></p> </li> </ol>"},{"location":"permissions/","title":"System Permissions","text":"<ol> <li>Add user to input group to access the joystick. Run the follwoing command in the terminal:</li> </ol> <pre><code># add input to user group\nsudo usermod -a -G input $USER\n</code></pre> <p>Then logout or reboot. If you want to check if the user is in the input group, run the following command:</p> <pre><code># check if user is in input group\ngroups $USER\n</code></pre> <p>To temporarily add the user to the input group without logging out, run the following command:</p> <pre><code># add input to user group\nnewgrp input\n</code></pre> <ol> <li>Add udev rules for imu (10c4:ea60)</li> </ol> <p>First add user to the dialout group, then logout and login: <pre><code>sudo usermod -a -G dialout $USER\n</code></pre></p> <pre><code># create a new file\nsudo nano /etc/udev/rules.d/99-hipnuc-imu.rules\n</code></pre> <p>Add the following content to the file, which will give permission to the user to access the imu, and create a symlink <code>/dev/sensors/imu_hipnuc</code>:</p> <pre><code>SUBSYSTEMS==\"usb\", KERNEL==\"ttyUSB[0-9]*\", ACTION==\"add\", ATTRS{idVendor}==\"10c4\", ATTRS{idProduct}==\"ea60\", MODE=\"0666\", SYMLINK+=\"sensors/imu_hipnuc\", GROUP=\"dialout\"\n</code></pre> <p>Then reload the udev rules, and unplug and plug the imu back in to apply the new rules:</p> <pre><code># reload udev rules\nsudo udevadm control --reload-rules\n</code></pre>"},{"location":"dev/changelog/","title":"Changelog","text":"<p>Attention</p> <p>This software is highly unstable and subject to change at any time.</p>"},{"location":"dev/changelog/#v020-2024-09-29","title":"[v0.2.0] - 2024-09-29","text":""},{"location":"dev/changelog/#breaking-changes","title":"\u2757 Breaking Changes","text":"<ul> <li>All user-facing interfaces now default to use radians instead of degrees.</li> <li>URDF now loads from Wiki-GRx-Models via fourier-robot-descriptions package.</li> <li>Nameing convention for all links and joints are now consistent with the URDF.</li> <li>Config file structure changed</li> </ul>"},{"location":"dev/changelog/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Robot namespace support in both CLI and API</li> <li><code>control_joints</code> API for velocity mode and current mode</li> <li>forward kinematcs and inverse kinematics API</li> <li>Add gravity compensation option to <code>move_joints</code></li> <li><code>movej</code> API</li> </ul>"},{"location":"dev/changelog/#enhancements","title":"\ud83d\udcaa Enhancements","text":"<ul> <li>Add <code>py.typed</code> file to package</li> <li>Migrated all examples from iki-grx-deploy</li> <li>Jupyter notebook tutorial</li> </ul>"},{"location":"dev/changelog/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Disabled zenoh broadcast by default to avoid clashes with other zenoh clients</li> </ul>"},{"location":"dev/changelog/#v015-2024-09-11","title":"[v0.1.5] - 2024-09-11","text":""},{"location":"dev/changelog/#enhancements_1","title":"\ud83d\udcaa Enhancements","text":"<ul> <li>Fortify service call handling in <code>ZenohSession</code></li> </ul>"},{"location":"dev/changelog/#bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Rename <code>zenoh.py</code> to <code>zenoh_utils.py</code> to avoid name clashing</li> </ul>"},{"location":"dev/changelog/#v014-2024-08-30","title":"[v0.1.4] - 2024-08-30","text":""},{"location":"dev/changelog/#enhancements_2","title":"\ud83d\udcaa Enhancements","text":"<ul> <li>Add <code>degrees</code> option to <code>move_joints</code></li> <li>Better documentation for <code>move_joints</code></li> </ul>"},{"location":"dev/changelog/#v013-2024-08-30","title":"[v0.1.3] - 2024-08-30","text":""},{"location":"dev/changelog/#enhancements_3","title":"\ud83d\udcaa Enhancements","text":"<ul> <li>Explicitly define exports in <code>__init__.py</code></li> </ul>"},{"location":"dev/changelog/#v012-2024-08-30","title":"[v0.1.2] - 2024-08-30","text":""},{"location":"dev/changelog/#features_1","title":"\ud83d\ude80 Features","text":"<ul> <li>Support <code>fourier-grx</code> version <code>v0.1.1-rc.6</code></li> </ul>"},{"location":"dev/changelog/#v011-2024-08-30","title":"[v0.1.1] - 2024-08-30","text":""},{"location":"dev/changelog/#bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fix typo in <code>RobotClient</code></li> <li>Allow multicast for compatibility</li> </ul>"},{"location":"dev/changelog/#v010-2024-08-30","title":"[v0.1.0] - 2024-08-30","text":""},{"location":"dev/changelog/#features_2","title":"\ud83d\ude80 Features","text":"<ul> <li>Support python &gt;= 3.8</li> <li>Support <code>fourier-grx</code> version <code>v0.1.1-rc.3</code></li> <li>Allow addressing control groups by name in <code>move_joints</code></li> </ul>"},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/api/#fourier_grx_client.client.RobotClient","title":"<code>fourier_grx_client.client.RobotClient</code>","text":"<p>               Bases: <code>ZenohSession</code></p> <p>Client class for GR series robots. Example:</p> <pre><code>&gt;&gt;&gt; from fourier_grx_client import RobotClient\n&gt;&gt;&gt; r = RobotClient(namespace=\"gr/my_awesome_robot\", server_ip=\"192.168.6.6\")\n</code></pre>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.base_pose","title":"<code>base_pose</code>  <code>property</code>","text":"<p>Get the current base pose.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.base_velocity","title":"<code>base_velocity</code>  <code>property</code>","text":"<p>Get the current base velocity.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.imu_angles","title":"<code>imu_angles</code>  <code>property</code>","text":"<p>Get the current IMU orientation as Euler angles.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.imu_angular_velocity","title":"<code>imu_angular_velocity</code>  <code>property</code>","text":"<p>Get the current IMU angular velocity.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.imu_linear_acceleration","title":"<code>imu_linear_acceleration</code>  <code>property</code>","text":"<p>Get the current IMU linear acceleration.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.imu_quaternion","title":"<code>imu_quaternion</code>  <code>property</code>","text":"<p>Get the current IMU orientation as a quaternion.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.is_moving","title":"<code>is_moving</code>  <code>property</code> <code>writable</code>","text":"<p>Whether the robot is currently moving.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.joint_current","title":"<code>joint_current</code>  <code>property</code>","text":"<p>Get the current joint currents of the robot.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.joint_effort","title":"<code>joint_effort</code>  <code>property</code>","text":"<p>Get the current joint efforts of the robot.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.joint_positions","title":"<code>joint_positions</code>  <code>property</code>","text":"<p>Get the current joint positions of the robot. The joint positions are in radians.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.joint_velocity","title":"<code>joint_velocity</code>  <code>property</code>","text":"<p>Get the current joint velocities of the robot. The joint velocities are in radians per second.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.__init__","title":"<code>__init__(freq=400, namespace=None, server_ip='localhost', verbose=False)</code>","text":"<p>The client class for GR series robots.</p> <p>Parameters:</p> Name Type Description Default <code>server_ip</code> <code>str</code> <p>IP address of the grx server. Please make sure to properly setup the firewall to allow port 7447. Defaults to \"localhost\".</p> <code>'localhost'</code> <code>freq</code> <code>int</code> <p>Robot state update frequency. Usually the user doesn't need to modify this. Defaults to 400.</p> <code>400</code> <code>namespace</code> <code>str</code> <p>Robot namespace. If not provided, it will try to use the <code>robot_id</code> provided in the environment variable <code>GRX_ROBOT_ID</code>. If the environment variable is not set, it will try to load the robot_id from the file <code>~/.fourier/robot_id.yaml</code>. If the file does not exist, it will fall back to the default namespace <code>gr</code>. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>FourierConnectionError</code> <p>If the connection to the server failed.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.calibrate_sensors","title":"<code>calibrate_sensors()</code>","text":"<p>Get sensor offsets and save to <code>sensor_offset.json</code></p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.control_joints","title":"<code>control_joints(control_type, commands, degrees=False)</code>","text":"<p>Control the joints in a group with the specified control type.</p> <p>Parameters:</p> Name Type Description Default <code>control_type</code> <code>Literal['position', 'velocity', 'current']</code> <p>The control type to set.</p> required <code>commands</code> <code>ndarray | list</code> <p>The control commands to set.</p> required <code>degrees</code> <code>bool</code> <p>Whether the joint positions and velocities are in degrees. Defaults to False.</p> <code>False</code>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.disable","title":"<code>disable()</code>","text":"<p>Disable the motors.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.enable","title":"<code>enable()</code>","text":"<p>Enable the motors.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.forward_kinematics","title":"<code>forward_kinematics(chain_names, q=None)</code>","text":"<p>Get the end effector pose of the specified chains.</p> <p>Info</p> <p>The available chain names are: <code>head</code>, <code>left_arm</code>, <code>right_arm</code>, with corresponding end effector frames: <code>head_yaw_link</code>, <code>left_end_effector_link</code>, <code>right_end_effector_link</code>, and the transformation matrices are in the <code>torso_link</code> frame.</p> <p>Parameters:</p> Name Type Description Default <code>chain_names</code> <code>list[str]</code> <p>The chains to get the end effector pose of. Available chain names: 'head', 'left_arm', 'right_arm'.</p> required <code>q</code> <code>ndarray</code> <p>The robot confiuration to do forward kinematics in. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>list</code> <p>The end effector pose is a list of 4x4 transformation matrices. The order of the matrices is the same as the order of the chain names.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_control_modes","title":"<code>get_control_modes()</code>","text":"<p>Get the control modes for all joints.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_gains","title":"<code>get_gains()</code>","text":"<p>Get the control gains for all joints.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_group_current","title":"<code>get_group_current(group)</code>","text":"<p>Get the joint currents of a group.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_group_effort","title":"<code>get_group_effort(group)</code>","text":"<p>Get the joint efforts of a group.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_group_position","title":"<code>get_group_position(group)</code>","text":"<p>Get the joint positions of a group.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_group_position_by_name","title":"<code>get_group_position_by_name(name)</code>","text":"<p>Get the joint positions of a group by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the group. Available group names: 'left_leg', 'right_leg', 'waist', 'head', 'left_arm', 'right_arm'.</p> required"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_group_velocity","title":"<code>get_group_velocity(group)</code>","text":"<p>Get the joint velocities of a group.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.get_transform","title":"<code>get_transform(target_frame, source_frame, q=None)</code>","text":"<p>Get the transformation matrix between two frames in configuration <code>q</code>. If <code>q</code> is None, the current joint positions are used.</p> <p>Parameters:</p> Name Type Description Default <code>target_frame</code> <code>str</code> <p>Name of the frame to get the pose of.</p> required <code>source_frame</code> <code>str</code> <p>Name of the frame to get the pose in.</p> required <code>q</code> <code>ndarray</code> <p>The robot confiuration to do forward kinematics in. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>np.ndarray: The transformation matrix.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.inverse_kinematics","title":"<code>inverse_kinematics(chain_names, targets, move=False, dt=0.005, velocity_scaling_factor=1.0, convergence_threshold=1e-08)</code>","text":"<p>Get the joint positions for the specified chains to reach the target pose.</p> <p>Parameters:</p> Name Type Description Default <code>chain_names</code> <code>list[str]</code> <p>The chains to get the joint positions for. Available chain names: 'head', 'left_arm', 'right_arm'.</p> required <code>targets</code> <code>list[ndarray]</code> <p>The target poses.</p> required <code>move</code> <code>bool</code> <p>Whether to move the robot to the target pose. Defaults to False.</p> <code>False</code> <code>dt</code> <code>float</code> <p>The time step for the inverse kinematics.</p> <code>0.005</code> <p>Returns:</p> Type Description <p>np.ndarray: The joint positions to reach the target pose (in radians).</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.list_frames","title":"<code>list_frames()</code>","text":"<p>List all available frames.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.liveness_check","title":"<code>liveness_check(timeout=1.0)</code>","text":"<p>Check if the robot server is alive.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Timeout in seconds. Defaults to 1.0.</p> <code>1.0</code> <p>Raises:</p> Type Description <code>FourierConnectionError</code> <p>If the connection to the server failed.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.move_joints","title":"<code>move_joints(group, positions, duration=0.0, degrees=False, blocking=True, gravity_compensation=False)</code>","text":"<p>Move in joint space with time duration.</p> <p>Move in joint space with time duration in a separate thread. Can be aborted using <code>abort()</code>. Can be blocking. If the duration is set to 0, the joints will move in their maximum speed without interpolation.</p> GR1T2 Joint Order <p>The joints order is as follows:     0: left_hip_roll_joint       1: left_hip_yaw_joint       2: left_hip_pitch_joint       3: left_knee_pitch_joint       4: left_ankle_pitch_joint       5: left_ankle_roll_joint   6: right_hip_roll_joint       7: right_hip_yaw_joint       8: right_hip_pitch_joint       9: right_knee_pitch_joint       10: right_ankle_pitch_joint       11: right_ankle_roll_joint   12: waist_yaw_joint       13: waist_pitch_joint       14: waist_roll_joint   15: head_pitch_joint       16: head_roll_joint       17: head_yaw_joint   18: left_shoulder_pitch_joint       19: left_shoulder_roll_joint       20: left_shoulder_yaw_joint       21: left_elbow_pitch_joint       22: left_wrist_yaw_joint       23: left_wrist_roll_joint       24: left_wrist_pitch_joint   25: right_shoulder_pitch_joint       26: right_shoulder_roll_joint       27: right_shoulder_yaw_joint       28: right_elbow_pitch_joint       29: right_wrist_yaw_joint       30: right_wrist_roll_joint       31: right_wrist_pitch_joint</p> <p>Example:</p> <pre><code>&gt;&gt;&gt; # Move the left arm to a specific position\n&gt;&gt;&gt; r.move_joints(\"left_arm\", [0, 0, 0, 20, 0, 0, 0], degrees=True)\n\n&gt;&gt;&gt; # or use the ControlGroup enum\n&gt;&gt;&gt; r.move_joints(ControlGroup.LEFT_ARM, [0, 0, 0, 20, 0, 0, 0], degrees=True)\n\n&gt;&gt;&gt; # or use indices, with radians instead of degrees\n&gt;&gt;&gt; r.move_joints([23, 24], [0.17, 0.17], degrees=False)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>ControlGroup | list | str</code> <p>The group of joints to move, specified by a string or a ControlGroup enum, or a list of joint indices.</p> required <code>positions</code> <code>ndarray[float]</code> <p>target joint position in degrees.</p> required <code>duration</code> <code>float</code> <p>Time duration in seconds. If set to 0, the joints will move in their maximum speed without interpolation. Defaults to 0.0.</p> <code>0.0</code> <code>degrees</code> <code>bool</code> <p>Whether the joint positions are in degrees. Defaults to False.</p> <code>False</code> <code>blocking</code> <code>bool</code> <p>If True, block until the move is completed. Defaults to True.</p> <code>True</code> <code>gravity_compensation</code> <code>bool</code> <p>Whether to enable gravity compensation. Defaults to False.</p> <code>False</code>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.movej","title":"<code>movej(side, target_position, target_velocity=None, target_acceleration=None, max_velocity=None, max_acceleration=None, max_jerk=None, degrees=False)</code>","text":"<p>Move the specified arm to the target position.</p> <p>Parameters:</p> Name Type Description Default <code>side</code> <code>Literal['left', 'right']</code> <p>Side of the arm to move. Can be \"left\" or \"right\".</p> required <code>target_position</code> <code>ndarray | list</code> <p>Desired joint position.</p> required <code>target_velocity</code> <code>ndarray | list | None</code> <p>Desired joint velocity. Defaults to None. If None, the robot will estimate the velocity based on the target position.</p> <code>None</code> <code>target_acceleration</code> <code>ndarray | list | None</code> <p>Desired acceleration. Defaults to None.</p> <code>None</code> <code>max_velocity</code> <code>ndarray | list | None</code> <p>Max velocity during trajectory generation. Defaults to None. If None, the robot will use the default max velocity at 5 rad/s.</p> <code>None</code> <code>max_acceleration</code> <code>ndarray | list | None</code> <p>Max acceleration during trajectory generation. Defaults to None. If None, the robot will use the default max acceleration at 10 rad/s^2.</p> <code>None</code> <code>max_jerk</code> <code>ndarray | list | None</code> <p>Max jerk during trajectory generation. Defaults to None. If None, the robot will use the default max jerk at 50 rad/s^3.</p> <code>None</code> <code>degrees</code> <code>bool</code> <p>True if the input is in degrees. Defaults to False.</p> <code>False</code>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.play_traj","title":"<code>play_traj(group, traj, timestamps=None, dt=0.005)</code>","text":"<p>Play a trajectory in joint space.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.reboot","title":"<code>reboot()</code>","text":"<p>Reboot the motors.</p>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.set_control_modes","title":"<code>set_control_modes(control_mode=None)</code>","text":"<p>Set the control modes for all joints.</p> <p>Parameters:</p> Name Type Description Default <code>control_mode</code> <code>ControlMode | list[ControlMode] | None</code> <p>ControlMode can be PD, VELOCITY, CURRENT. Defaults to None.</p> <code>None</code>"},{"location":"reference/api/#fourier_grx_client.client.RobotClient.set_enable","title":"<code>set_enable(enable)</code>","text":"<p>Enable or disable the motors.</p>"},{"location":"reference/api/#fourier_grx_client.utils.ControlGroup","title":"<code>fourier_grx_client.utils.ControlGroup</code>","text":"<p>               Bases: <code>tuple</code>, <code>Enum</code></p> <p>Control group enumeration. Each group is a tuple of (start, num_joints). Available groups are: ALL, LEFT_LEG, RIGHT_LEG, WAIST, HEAD, LEFT_ARM, RIGHT_ARM, LOWER, UPPER, UPPER_EXTENDED.</p> Source code in <code>src/fourier_grx_client/utils.py</code> <pre><code>class ControlGroup(tuple, Enum):\n    \"\"\"Control group enumeration. Each group is a tuple of (start, num_joints). Available groups are: ALL, LEFT_LEG, RIGHT_LEG, WAIST, HEAD, LEFT_ARM, RIGHT_ARM, LOWER, UPPER, UPPER_EXTENDED.\"\"\"\n\n    ALL = (0, 32)\n    LEFT_LEG = (0, 6)\n    RIGHT_LEG = (6, 6)\n    WAIST = (12, 3)\n    HEAD = (15, 3)\n    LEFT_ARM = (18, 7)\n    RIGHT_ARM = (25, 7)\n    LOWER = (0, 18)\n    UPPER = (18, 14)\n    UPPER_EXTENDED = (12, 20)\n\n    @property\n    def slice(self):\n        return slice(self.value[0], self.value[0] + self.value[1])\n\n    @property\n    def num_joints(self):\n        return self.value[1]\n\n    @classmethod\n    def from_string(cls, s: str):\n        return getattr(cls, s.upper())\n</code></pre>"},{"location":"reference/api/#fourier_grx_client.utils.ControlMode","title":"<code>fourier_grx_client.utils.ControlMode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Control mode enumeration.</p> Source code in <code>src/fourier_grx_client/utils.py</code> <pre><code>class ControlMode(IntEnum):\n    \"\"\"Control mode enumeration.\"\"\"\n\n    NONE = 0x00\n    CURRENT = 0x01\n    EFFORT = 0x02\n    VELOCITY = 0x03\n    POSITION = 0x04\n    PD = 0x09\n    OTHER = 0x0A\n</code></pre>"},{"location":"reference/cli/","title":"<code>grx</code> CLI Reference","text":"<p>Attention</p> <p>The <code>grx</code> CLI is installed with the <code>fourier-grx</code> package,  which is only comaptible with <code>python==3.11</code>. It is intended to be running onboard the robot. Make sure to install the package before using the CLI.</p>"},{"location":"reference/cli/#grx","title":"<code>grx</code>","text":"<p>Usage:</p> <pre><code>$ grx [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>run</code>: Run the robot server.</li> <li><code>states</code>: Print the current robot states.</li> <li><code>calibrate</code>: Calibrate the robot sensors and save the...</li> <li><code>disable</code>: Disable all the motors.</li> <li><code>enable</code>: Enable all the motors.</li> <li><code>generate-sensor-offset</code>: Generate sensor offset file from the...</li> <li><code>run</code>: Run the robot server.</li> <li><code>states</code>: Print the current robot states.</li> </ul>"},{"location":"reference/cli/#grx-run","title":"<code>grx run</code>","text":"<p>Run the robot server.</p> <p>Usage:</p> <pre><code>$ grx run [OPTIONS] CONFIG\n</code></pre> <p>Arguments:</p> <ul> <li><code>CONFIG</code>: Path to the config file  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--namespace TEXT</code>: Namespace for the robot</li> <li><code>--namespace TEXT</code>: Namespace for the robot  [default: gr]</li> <li><code>--urdf-path TEXT</code>: Path to the urdf file  [default: ./urdf]</li> <li><code>--freq INTEGER</code>: Main loop frequency in hz. defaults to 400hz.  [default: 400]</li> <li><code>--verbose / --no-verbose</code>: Print internal debug info  [default: verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/cli/#grx-states","title":"<code>grx states</code>","text":"<p>Print the current robot states.</p> <p>Usage:</p> <pre><code>$ grx states [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/cli/#grx-calibrate","title":"<code>grx calibrate</code>","text":"<p>Calibrate the robot sensors and save the offsets to a file</p> <p>Usage:</p> <pre><code>$ grx calibrate [OPTIONS] [OUTPUT_PATH]\n</code></pre> <p>Arguments:</p> <ul> <li><code>[OUTPUT_PATH]</code>: Path to the output file  [default: sensor_offsets.json]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/cli/#grx-disable","title":"<code>grx disable</code>","text":"<p>Disable all the motors.</p> <p>Usage:</p> <pre><code>$ grx disable [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/cli/#grx-enable","title":"<code>grx enable</code>","text":"<p>Enable all the motors.</p> <p>Usage:</p> <pre><code>$ grx enable [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"reference/cli/#grx-generate-sensor-offset","title":"<code>grx generate-sensor-offset</code>","text":"<p>Generate sensor offset file from the control SDK installed on the host machine, usually located at ~/RoCS/bin/pythonscripts/absAngle.json</p> <p>Usage:</p> <pre><code>$ grx generate-sensor-offset [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"tutorials/calibration/","title":"Calibration Procedure","text":"<p>If the upper limb posture appears abnormal or if the motors have been replaced, you should perform zero calibration. The calibration procedure is as follows:</p> <ul> <li>Turn off the robot actuators and the embedded robot computer.</li> <li>Insert the calibration tool into the robot's lower limbs and waist joint pinholes. There are <code>6*2</code> zero-position pinholes in the lower limbs and <code>3*1</code> zero-position pinholes in the waist.</li> </ul> <p> </p> <ul> <li>Connect the embedded robot computer to a monitor through the extension dock. Plug in a keyboard and a mouse into the extension dock as well.</li> <li>Release the Emergency Stop switch and power on the embedded robot computer. The login password is <code>fftai2015</code>.</li> </ul>"}]}